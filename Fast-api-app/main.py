from fastapi import FastAPI, UploadFile, File
from fastapi.responses import JSONResponse
import subprocess
import os
import json
import uuid
import tempfile

app = FastAPI()

# ========================
# üìÅ PATH SETUP
# ========================
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
AUDIO_DIR = os.path.join(BASE_DIR, "Audio")
ANALYZE_SCRIPT = os.path.join(AUDIO_DIR, "analyze_audio_final.py")
ANALYSIS_FILE = os.path.join(AUDIO_DIR, "audio_analysis.json")

# ‚úÖ Path to your venv python (so xgboost etc. are found)
VENV_PYTHON = os.path.join(BASE_DIR, "venv", "Scripts", "python.exe")

# ========================
# üéß API ENDPOINT
# ========================
@app.post("/analyze-audio")
async def analyze_audio(file: UploadFile = File(...)):
    """
    Upload an audio or video file (e.g. .mp4, .wav) for analysis.
    The server saves it temporarily, runs analyze_audio_final.py,
    and returns the JSON analysis output.
    """
    # 1Ô∏è‚É£ Save uploaded file temporarily in system temp directory
    file_ext = os.path.splitext(file.filename)[1]
    unique_name = f"temp_{uuid.uuid4()}{file_ext}"
    temp_path = os.path.join(tempfile.gettempdir(), unique_name)

    with open(temp_path, "wb") as f:
        f.write(await file.read())

    try:
        # 2Ô∏è‚É£ Run your analysis script using venv Python
        result = subprocess.run(
            [VENV_PYTHON, ANALYZE_SCRIPT, temp_path],
            capture_output=True,
            text=True,
            check=True
        )

        # 3Ô∏è‚É£ Read JSON output generated by your script
        if os.path.exists(ANALYSIS_FILE):
            with open(ANALYSIS_FILE, "r") as f:
                analysis = json.load(f)
        else:
            analysis = {"warning": "Analysis file not found", "stdout": result.stdout}

        return JSONResponse({"success": True, "analysis": analysis})

    except subprocess.CalledProcessError as e:
        return JSONResponse(
            {"success": False, "error": e.stderr or str(e)},
            status_code=500
        )

    finally:
        # 4Ô∏è‚É£ Always clean up
        if os.path.exists(temp_path):
            os.remove(temp_path)
